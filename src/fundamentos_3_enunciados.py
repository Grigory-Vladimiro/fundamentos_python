# üß™ Fundamentos Python III ‚Äì Funciones

# ------------------------------
# ‚ú® Ejercicio 1: Saludo b√°sico
# Objetivo: Aprender a definir y llamar funciones
# Crea una funci√≥n llamada saludar() que imprima: "¬°Hola, bienvenido/a!"
# Luego llama a la funci√≥n una vez para comprobar que funciona.

def saludar():
    print("¬°Hola, bienvenido/a!")
saludar()

# ------------------------------
# ‚ú® Ejercicio 2: Saludo personalizado
# Objetivo: Trabajar con par√°metros
# Crea una funci√≥n llamada saludar_persona(nombre) que imprima: "Hola, [nombre]!"
# Llama a la funci√≥n dos veces con diferentes nombres.

def saludar_persona(nombre):
    print(f"Hola, {nombre}!")
saludar_persona("Grigory")

# ------------------------------
# ‚ú® Ejercicio 3: Suma f√°cil
# Objetivo: Usar par√°metros y return
# Crea una funci√≥n llamada sumar(a, b) que devuelva la suma de dos n√∫meros.
# Guarda el resultado en una variable y mu√©stralo con print().

def sumar(a, b):
    return a + b
resultado = sumar(1, 2)
print(resultado)

# ------------------------------
# ‚ú® Ejercicio 4: ¬øPar o impar?
# Objetivo: Usar l√≥gica dentro de una funci√≥n
# Escribe una funci√≥n es_par(numero) que devuelva True si el n√∫mero es par y False si es impar.
# Pru√©bala con varios n√∫meros y muestra el resultado.

def es_par(numero):
    return numero % 2 == 0
print(f"1 es par: {es_par(1)}")
print(f"2 es par: {es_par(2)}")
print(f"3 es par: {es_par(3)}")
print(f"4 es par: {es_par(4)}")

# ------------------------------
# ‚ú® Ejercicio 5: Mensaje con formato
# Objetivo: Devolver una cadena con formato
# Crea una funci√≥n llamada mensaje(nombre, edad) que devuelva una frase como:
# "Me llamo Marta y tengo 30 a√±os."
# Usa return y luego muestra el mensaje con print().

def mensaje(nombre, edad):
    return f"Me llamo {nombre} y tengo {edad} a√±os."
frase = mensaje("Marta", 30)
print(frase)

# ------------------------------
# ‚ú® Ejercicio 6: Calculadora simple
# Objetivo: Practicar varias funciones juntas
# Crea 4 funciones: sumar(a, b), restar(a, b), multiplicar(a, b), dividir(a, b)
# Llama a cada una con un par de n√∫meros y muestra los resultados.
# Bonus: en dividir(), si el segundo n√∫mero es 0, devuelve "No se puede dividir por cero"

def sumar(a, b):
    return a + b
def restar(a, b):
    return a - b
def multiplicar(a, b):  
    return a * b
def dividir(a, b):
    if b == 0:
        return "No se puede dividir por cero"
    else:
        return a / b

print(f"Suma: {sumar(10, 5)}")
print(f"Resta: {restar(10, 5)}")
print(f"Multiplicaci√≥n: {multiplicar(10, 5)}")
print(f"Divisi√≥n: {dividir(10, 5)}")
print(f"Divisi√≥n por cero: {dividir(10, 0)}")

# ------------------------------
# ‚ú® Ejercicio 7: Edad en el futuro
# Objetivo: Usar return con operaciones
# Escribe una funci√≥n llamada edad_futura(edad_actual, a√±os) que calcule la edad que tendr√°s despu√©s de X a√±os.

def edad_futura(edad_actual, a√±os):
    return edad_actual + a√±os
mi_edad = edad_futura(39, 5)
print(f"Mi edad en 5 a√±os ser√°: {mi_edad} a√±os.")

# ------------------------------
# ‚ú® Ejercicio 8: Media de 3 n√∫meros
# Objetivo: Trabajar con n√∫meros y return
# Crea una funci√≥n llamada calcular_media(a, b, c) que devuelva la media de tres n√∫meros.
# Prueba la funci√≥n y muestra el resultado con print().

def calcular_media(a, b, c):
    return (a + b + c) / 3
media = calcular_media(1, 2, 3)
print(f"La media es: {media}")

# ------------------------------
# ‚ú® Ejercicio 9: Mostrar men√∫ (sin l√≥gica)
# Objetivo: Separar la presentaci√≥n de la l√≥gica
# Escribe una funci√≥n llamada mostrar_menu() que imprima un peque√±o men√∫ como:
# 1. Ver perfil
# 2. Editar perfil
# 3. Cerrar sesi√≥n

def mostrar_menu():
    print("1. Ver perfil")
    print("2. Editar perfil")
    print("3. Cerrar sesi√≥n")
mostrar_menu()

# ------------------------------
# üåü Reto Final: Generador de contrase√±as

# Crea una funci√≥n llamada generar_contrase√±a(longitud)
# que devuelva una contrase√±a aleatoria con la longitud especificada.

# La contrase√±a debe contener una mezcla de:
# - letras min√∫sculas (a-z)
# - letras may√∫sculas (A-Z)
# - n√∫meros (0-9)
# - s√≠mbolos como !, @, #, $, %, &, *

# Ejemplo de uso:
# contrase√±a = generar_contrase√±a(12)
# print(contrase√±a)  # -> A2c$e9#Tq&7L

# Bonus:
# - Usa la librer√≠a random
# - Controla que la longitud m√≠nima sea 8 caracteres
# - A√±ade un mensaje de advertencia si se pide menos de 8

import random
import string

def generar_contrase√±a(longitud):
    if longitud < 8:
        return "La longitud m√≠nima es de 8 caracteres."
    
    caracteres = (
        string.ascii_lowercase + 
        string.ascii_uppercase +  
        string.digits + 
        "!@#$%^&*"          
    )
    contrase√±a = ''.join(random.choice(caracteres) for _ in range(longitud))
    return contrase√±a
contrase√±a = generar_contrase√±a(12)
print(f"Tu contrase√±a es: {contrase√±a}")